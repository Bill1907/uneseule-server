steps:
  # Step 1: Docker 이미지 빌드
  # 프로젝트 루트에 있는 Dockerfile을 사용하여 컨테이너 이미지를 빌드합니다.
  # --no-cache: 빌드 캐시를 사용하지 않아 항상 최신 상태로 빌드합니다.
  # -t: 이미지 태그를 지정합니다. Artifact Registry 경로와 서비스명, 커밋 SHA를 포함합니다.
  # .: 현재 디렉토리를 빌드 컨텍스트로 사용합니다.
  # -f Dockerfile: 명시적으로 Dockerfile을 지정합니다.
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Docker Image
    args:
      - build
      - '--no-cache'
      - '-t'
      - >-
        ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}
      - .
      - '-f'
      - Dockerfile

  # Step 2: 빌드된 Docker 이미지를 Artifact Registry에 푸시
  # 빌드된 이미지를 Google Cloud의 Artifact Registry (컨테이너 이미지 저장소)에 업로드합니다.
  - name: 'gcr.io/cloud-builders/docker'
    id: Push to Artifact Registry
    args:
      - push
      - >-
        ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}

  # Step 3: Cloud Run 서비스 배포
  # Artifact Registry에 푸시된 이미지를 사용하여 Cloud Run 서비스를 업데이트합니다.
  # --platform=managed: 관리형 Cloud Run (기본 설정)
  # --image: 배포할 Docker 이미지 경로를 지정합니다.
  # --labels: Cloud Build 정보(커밋 SHA, 빌드 ID 등)를 Cloud Run 리비전에 라벨로 추가합니다.
  # --region: 서비스가 배포될 리전을 지정합니다. (예: us-central1)
  # --quiet: 배포 과정을 간결하게 출력합니다.
  # 필요한 경우, 이곳에 --set-env-vars=KEY=VALUE 형태로 환경 변수를 추가하거나
  # --memory=512Mi, --cpu=1, --timeout=300s 와 같은 리소스 및 시간 제한 설정을 추가할 수 있습니다.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy to Cloud Run
    entrypoint: gcloud
    args:
      - run
      - services
      - update
      - ${_SERVICE_NAME}
      - '--platform=managed'
      - '--image=${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '--labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=${COMMIT_SHA},gcb-build-id=${BUILD_ID},gcb-trigger-id=${_TRIGGER_ID}'
      - '--region=${_DEPLOY_REGION}'
      - '--quiet'
      # --add-cloudsql-instances=${_CLOUD_SQL_CONNECTION_NAME}  # Cloud SQL 연결 시 주석 해제 및 변수 설정
      # --timeout=600s # 시작 시간 제한을 600초(10분)로 늘릴 경우 주석 해제
      # --memory=512Mi # 메모리 할당량을 512MiB로 늘릴 경우 주석 해제
      # --set-env-vars=YOUR_DB_HOST=127.0.0.1,YOUR_DB_USER=root # 필요한 환경 변수 추가

# 빌드가 완료되면 생성될 이미지 목록
images:
  - >-
    ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}

# 대체(Substitution) 변수 설정
# Cloud Build 트리거 설정 시 이 변수들을 프로젝트에 맞게 설정해야 합니다.
# 예시 값은 'uneseule-ai' 프로젝트에 맞춰져 있습니다.
options:
  substitutionOption: ALLOW_LOOSE # 정의되지 않은 변수 사용 허용 (예: COMMIT_SHA)
  logging: CLOUD_LOGGING_ONLY # 로그를 Cloud Logging에만 저장

substitutions:
  _DEPLOY_REGION: us-central1 # Cloud Run 서비스를 배포할 리전
  _TRIGGER_ID: 220f73b4-c511-4bc1-bdaf-8682264b720d # Cloud Build 트리거 ID (실제 트리거 ID로 변경)
  _AR_HOSTNAME: us-central1-docker.pkg.dev # Artifact Registry 호스트명
  _AR_REPOSITORY: cloud-run-source-deploy # Artifact Registry 저장소 이름 (이름이 다를 수 있음)
  _AR_PROJECT_ID: uneseule-ai # Google Cloud 프로젝트 ID
  _SERVICE_NAME: uneseule-server # Cloud Run 서비스 이름
  # _CLOUD_SQL_CONNECTION_NAME: your-project-id:your-region:your-instance-name # Cloud SQL 연결 시 주석 해제 및 설정

# 빌드에 추가할 태그 (선택 사항)
tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - uneseule-server
